# Abstract render definition for a grid column
prototype(M12.Foundation:Column) < prototype(M12.Foundation:Content) {
	node = ${node}

	attributes.class.smallSize = ${q(node).property('classSmallSize') ? q(node).property('classSmallSize') + " columns" : null}
	attributes.class.smallOffset = ${q(node).property('classSmallOffset') ? q(node).property('classSmallOffset') : null}
	attributes.class.smallPushPull = ${q(node).property('classSmallPushPull') ? q(node).property('classSmallPushPull') : null}
	attributes.class.smallResetOrder = ${q(node).property('classSmallResetOrder') ? q(node).property('classSmallResetOrder') : null}
	attributes.class.smallAlign = ${q(node).property('classSmallAlign') ? q(node).property('classSmallAlign') : null}

	attributes.class.mediumSize = ${q(node).property('classMediumSize') ? q(node).property('classMediumSize') + " columns" : null}
	attributes.class.mediumOffset = ${q(node).property('classMediumOffset') ? q(node).property('classMediumOffset') : null}
	attributes.class.mediumPushPull = ${q(node).property('classMediumPushPull') ? q(node).property('classMediumPushPull') : null}
	attributes.class.mediumResetOrder = ${q(node).property('classMediumResetOrder') ? q(node).property('classMediumResetOrder') : null}
	attributes.class.mediumAlign = ${q(node).property('classMediumAlign') ? q(node).property('classMediumAlign') : null}

	attributes.class.largeSize = ${q(node).property('classLargeSize') ? q(node).property('classLargeSize') + " columns" : null}
	attributes.class.largeOffset = ${q(node).property('classLargeOffset') ? q(node).property('classLargeOffset') : null}
	attributes.class.largePushPull = ${q(node).property('classLargePushPull') ? q(node).property('classLargePushPull') : null}
	attributes.class.largeResetOrder = ${q(node).property('classLargeResetOrder') ? q(node).property('classLargeResetOrder') : null}
	attributes.class.largeAlign = ${q(node).property('classLargeAlign') ? q(node).property('classLargeAlign') : null}

	attributes.class.endColumn = ${q(node).property('classEndColumn') ? 'end' : null}

	columnContent = TYPO3.Neos:ContentCollection {
		nodePath = '.'
	}
}

# Basic implementation of a flexible GridColumns element,
# not exposed directly but inherited by all specific M12.Foundation:GridColumns* content elements
prototype(M12.Foundation:GridColumns) >
prototype(M12.Foundation:GridColumns) < prototype(M12.Foundation:Content) {
	templatePath = 'resource://M12.Foundation/Private/Templates/NodeTypes/GridColumns.html'

	attributes.class.row = 'row'

	columns = TYPO3.TypoScript:Collection {
		collection = ${q(node).children('[instanceof M12.Foundation:Column]')}
		itemRenderer = M12.Foundation:Column
		itemName = 'node'
	}
}

prototype(M12.Foundation:GridColumns2) >
prototype(M12.Foundation:GridColumns2) < prototype(M12.Foundation:GridColumns)

prototype(M12.Foundation:GridColumns3) >
prototype(M12.Foundation:GridColumns3) < prototype(M12.Foundation:GridColumns)

prototype(M12.Foundation:GridColumns4) >
prototype(M12.Foundation:GridColumns4) < prototype(M12.Foundation:GridColumns)
