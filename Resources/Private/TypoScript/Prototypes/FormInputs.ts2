# Abstract prototype for all form elements.
prototype(M12.Foundation:FormElementAbstract) < prototype(M12.Foundation:Content) {
	inputId = ${q(node).property('htmlCustomId') ? q(node).property('htmlCustomId') : q(node).property('_nodeData.identifier')}

	inputAttributes = TYPO3.TypoScript:RawArray {
		placeholder = ${q(node).property('inputPlaceholder') ? q(node).property('inputPlaceholder') : null}
		checked = ${q(node).property('inputChecked') ? '' : null}
		required = ${q(node).property('inputRequired') ? '' : null}
		readonly = ${q(node).property('inputReadOnly') ? '' : null}
		disabled = ${q(node).property('inputDisabled') ? '' : null}
	}
}

# Fieldset with legend.
prototype(M12.Foundation:FormFieldset) < prototype(M12.Foundation:Content) {
	content = TYPO3.Neos:ContentCollection {
		nodePath = 'content'
	}
}

# Label.
prototype(M12.Foundation:FormLabel) < prototype(M12.Foundation:Content) {
	attributes.class.inline = ${q(node).property('labelInlined') ? 'inline' : null}
}

# Text based form input.
prototype(M12.Foundation:FormInput) < prototype(M12.Foundation:FormElementAbstract)

# Pre/postfix.
prototype(M12.Foundation:FormInputFix) < prototype(M12.Foundation:Content) {
	attributes.class.fix = ${q(node).property('fixType')}

	tagName = ${q(node).property('isButton') ? 'button' : 'span'}
}

# Radio input.
prototype(M12.Foundation:FormInputRadio) < prototype(M12.Foundation:FormElementAbstract)

# Checkbox input.
prototype(M12.Foundation:FormInputCheckbox) < prototype(M12.Foundation:FormElementAbstract)

# Select input.
prototype(M12.Foundation:FormInputSelect) < prototype(M12.Foundation:FormElementAbstract) {
	selectOptions = TYPO3.TypoScript:RawArray {
		data = ${q(node).property('selectOptions')}
		data2 = ${q(node).property('selectOptions')}
	}
}

# Textarea input.
prototype(M12.Foundation:FormInputTextarea) < prototype(M12.Foundation:FormElementAbstract)
