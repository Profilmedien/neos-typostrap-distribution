prototype(TYPO3.Neos:Content) {
	# remove default Neos class processing
	attributes.class.@process.nodeType >

	attributes.class = TYPO3.TypoScript:RawArray {
		# Copied from original TYPO3.Neos:Content - adds class with Neos node-type
		nodeType = ${String.trim(String.toLowerCase(String.pregReplace(q(node).property('_nodeType.name'), '/[[:^alnum:]]/', '-')))}
		nodeType.@position = 'start'

		textAlign = ${q(node).property('classTextAlign')}
		textAlign.@position = '20'

		clearfix = ${q(node).property('classClearfix') ? 'clearfix' : null}
		clearfix.@after = '40'

		float = ${q(node).property('classFloat')}
		float.@after = 'clearfix'

		showByScreenSize = ${q(node).property('classShowByScreenSize')}
		showByScreenSize.@position = '60'

		hideByScreenSize = ${q(node).property('classHideByScreenSize')}
		hideByScreenSize.@after = 'showByScreenSize'

		orientationDetection = ${q(node).property('classOrientationDetection')}
		orientationDetection.@position = '70'

		touchDetection = ${q(node).property('classTouchDetection')}
		touchDetection.@after = 'orientationDetection'

		radiusAndRounded = ${q(node).property('classRadiusAndRounded')}
		radiusAndRounded.@position = '80'

		hide = ${q(node).property('classHide') ? 'hide' : null}
		hide.@position = '100'

		customClass = ${q(node).property('classCustomClass')}
		customClass.@position = 'end'

		# At the end remove extra spaces after many class items were joined
		@process.trimThatWitch {
		 	expression = ${String.trim(String.pregReplace(Array.join(value,' '),'/\s+/',' '))}
		 	@position = 'end'
		}
	}

	attributes.id = ${q(node).property('htmlCustomId') ? String.trim(q(node).property('htmlCustomId')) : null}
}

#
# M12.Foundation:Content is a base for all M12.Foundation:* components.
# Add here properties/functionality which you don't want to add
# to default TYPO3.Neos:Content.
#
prototype(M12.Foundation:Content) < prototype(TYPO3.Neos:Content) {
	# Plenty of Foundation-based node types inherits after M12.Foundation:SemanticType,
	# which adds a property 'tagName', which can be used in the template to render
	# different than default tag (usually DIV).
	tagName = ${q(node).property('tagName') ? q(node).property('tagName') : 'div'}
}
